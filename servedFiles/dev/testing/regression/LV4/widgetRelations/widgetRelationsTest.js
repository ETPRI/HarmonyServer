class widgetRelationsTest {
  constructor() {
    this.tableDOM = document.getElementById("testNodes");
    this.widgets = document.getElementById("widgets");
    this.db = new db();
    this.refreshTable();
  }

  clearAll(button) { // Clears all "Test" nodes for a well-defined starting place
    this.db.setQuery("match (n:Test) detach delete n with count(*) as dummy match (n:Test2) detach delete n");
    this.db.runQuery(this, "clearComplete");
  }

  clearComplete(data) { // Records result of clearAll and allows next step in playback
    let obj = {};
    obj.id = "clearAll";
    obj.action="click";
    obj.data = data;
    app.regression.log(JSON.stringify(obj));
    app.regression.record(obj);
  }
  newNode(select) {
    const value = select.options[select.selectedIndex].value;
    new widgetNode(value);
    let obj = {};
    obj.id = "newNode";
    obj.value = value;
    obj.action = "click";
    app.regression.log(JSON.stringify(obj));
    app.regression.record(obj);
  }

  refreshTable(button) {
    this.db.setQuery("match (n:Test) return n order by n.name, n.field1, n.field2, n.field3 union match(n:Test2) return n order by n.name, n.field1, n.field2, n.field3");
    this.db.runQuery(this, 'refreshComplete', button);
  }

  refreshComplete(data, button) {
    while (this.tableDOM.hasChildNodes()) {
      this.tableDOM.removeChild(this.tableDOM.firstChild);
    }

    for (let i = 0; i < data.length; i++) {
      const row = data[i].n;
      const rowDOM = document.createElement('tr');
      const html = `<td idr="ID${i}" draggable="true" ondragstart="widgetRelationsTest.drag(this, event)">${row.identity}</td>
                    <td idr="Type${i}" draggable="true" ondragstart="widgetRelationsTest.drag(this, event)">${row.labels[0]}</td>
                    <td idr="Name${i}" draggable="true" ondragstart="widgetRelationsTest.drag(this, event)">${row.properties.name}</td>
                    <td>${row.properties.field1}</td><td>${row.properties.field2}</td><td>${row.properties.field3}</td>
                    <td><input type="button" idr="start${i}" value="start" onclick="widgetRelationsTest.newRelation(this)"</td>
                    <td><input type="button" idr="end${i}" value="end" onclick="widgetRelationsTest.newRelation(this)"</td>`
      rowDOM.innerHTML = html;
      this.tableDOM.appendChild(rowDOM);
    }

    // log
    if (button) { // Log if this table was generated by clicking a button
      const obj = {};
      obj.id = "refresh";
      obj.action = "click";
      obj.data = JSON.parse(JSON.stringify(data));
      app.stripIDs(obj.data);
      app.regression.log(JSON.stringify(obj));
      app.regression.record(obj);
    }
  }

  drag(input, evnt){ // stores information about a node in the drag event. input is the thing being dragged.
    const nodeRow = input.parentElement;

    const IDcell = nodeRow.children[0];
    const ID = IDcell.textContent;

    const typeCell = nodeRow.children[1];
    const type = typeCell.textContent;

    const nameCell = nodeRow.children[2];
    const name = nameCell.textContent;

    const data = {};
    data.name = name;
    data.type = type;
    data.nodeID = ID;

    evnt.dataTransfer.setData("text/plain", JSON.stringify(data));
    let obj = {};
    obj.id = "testNodes";
    obj.idr = input.getAttribute("idr");
    obj.action = "dragstart";
    app.regression.log(JSON.stringify(obj));
    app.regression.record(obj);
  }

  newRelation(button) {
    const nodeRow = button.parentElement.parentElement;
    const IDcell = nodeRow.children[0];
    const ID = IDcell.textContent;

    const label = document.createTextNode(`Editing ${button.value} relations for node #${ID}; opened while logged in as ${app.login.userName}`);
    const newDiv = document.createElement('div');

    this.widgets.appendChild(label);
    this.widgets.appendChild(newDiv);

    // Start logging
    const obj = {};
    obj.id = "testNodes";
    obj.idr = button.getAttribute("idr");
    obj.action = "click";
    app.regression.log(JSON.stringify(obj));
    app.regression.record(obj);

    // Actually make the widget
    new widgetRelations(newDiv, ID, button.value, app.idCounter);
  }
}
